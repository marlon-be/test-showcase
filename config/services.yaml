# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,CommandBus,Entity,Migrations,Tests,Testing,Repository,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Repository\Interfaces\ParticipantRepository:
        class: App\Repository\DoctrineParticipantRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: ['App\Entity\Participant']
        public: true

    App\Repository\Interfaces\CompanyRepository:
        class: App\Repository\DoctrineCompanyRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: ['App\Entity\Company']
        public: true

    App\Form\CreateParticipantType:
        tags: ['form.type']

    App\CommandBus\Handler\CreateParticipantCommandHandler:
        tags:
            - { name: command_handler, handles: App\CommandBus\Command\CreateParticipantCommand}
        public: true
